name: 🚀 Deploy to Staging

on:
  push:
    branches: [ chris ]
  pull_request:
    branches: [ chris ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/digitalboda-backend

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Set up test environment
      run: |
        # Create .env file for testing
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        DJANGO_ENV=testing
        DB_NAME=test_db
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_HOST=localhost
        DB_PORT=5432
        ALLOWED_HOSTS=localhost,127.0.0.1
        ID_ENCRYPTION_KEY=test-encryption-key-32-bytes-long
        ID_HASH_SALT=test-salt
        EOF

    - name: 🗃️ Run migrations
      run: |
        python manage.py migrate

    - name: 🧪 Run tests
      run: |
        python manage.py test

    - name: 📊 Check code style
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-deploy:
    name: 🏗️ Build and Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/chris' && github.event_name == 'push'

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: 🚀 Deploy to Digital Ocean Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          # Navigate to project directory
          cd /var/www/digitalboda_staging
          
          # Pull latest changes
          git fetch origin
          git checkout chris
          git pull origin chris
          
          # Update environment variables
          echo "Updating environment variables..."
          
          # Build and restart containers
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up --build -d
          
          # Run migrations
          docker-compose -f docker-compose.staging.yml exec -T web python manage.py migrate
          
          # Collect static files
          docker-compose -f docker-compose.staging.yml exec -T web python manage.py collectstatic --noinput
          
          # Check container health
          docker-compose -f docker-compose.staging.yml ps

    - name: 🔔 Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Staging Deployment ${{ job.status }}!
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
